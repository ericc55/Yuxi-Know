// English translations
export default {
  common: {
    loading: 'Loading...',
    save: 'Save',
    cancel: 'Cancel',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    create: 'Create',
    confirm: 'Confirm',
    search: 'Search',
    close: 'Close',
    back: 'Back',
    next: 'Next',
    previous: 'Previous',
    submit: 'Submit',
    reset: 'Reset',
    refresh: 'Refresh',
    expand: 'Expand',
    collapse: 'Collapse',
    enable: 'Enable',
    disable: 'Disable',
    visible: 'Visible',
    hidden: 'Hidden',
    settings: 'Settings',
    logout: 'Logout',
    login: 'Login',
    warning: 'Warning',
    success: 'Success',
    error: 'Error',
    info: 'Info',
    debug: 'Debug',
    debugPanel: 'Debug Panel',
    showTotal: 'Total {total} items',
    addSuccess: 'Added successfully',
    noDataAvailable: 'No data available'
  },
  navbar: {
    brand: 'Yuxi-Know',
    chat: 'Chat',
    agents: 'AI Agents',
    knowledgeBase: 'Knowledge Base',
    knowledgeGraph: 'Knowledge Graph',
    settings: 'Settings',
    database: 'Database',
    user: 'User',
    switchLanguage: 'Switch Language'
  },
  auth: {
    login: 'Login',
    register: 'Register',
    username: 'Username',
    password: 'Password',
    confirmPassword: 'Confirm Password',
    rememberMe: 'Remember Me',
    forgotPassword: 'Forgot Password?',
    loginSuccess: 'Login successful',
    loginFailed: 'Login failed',
    logout: 'Logout',
    logoutSuccess: 'Logout successful',
    pleaseLogin: 'Please login first',
    invalidCredentials: 'Invalid username or password',
    systemInit: 'System Initialization',
    createAdminAccount: 'Create Administrator Account',
    initDescription: 'First run detected, please create a super administrator account:',
    pleaseEnterUsername: 'Please enter username',
    pleaseEnterPassword: 'Please enter password',
    pleaseConfirmPassword: 'Please confirm password',
    passwordMismatch: 'Passwords do not match',
    otherLoginMethods: 'Other Login Methods',
    googleLogin: 'Google Login',
    microsoftLogin: 'Microsoft Login',
    facebookLogin: 'Facebook Login',
    contactUs: 'Contact Us',
    help: 'Help',
    privacyPolicy: 'Privacy Policy',
    developmentFeature: 'This feature is under development, stay tuned!'
  },
  home: {
    title: 'Yuxi-Know',
    subtitle: 'AI-Powered Knowledge Management Tool',
    description: 'Experience the new generation AI knowledge Q&A system, enjoy intelligent conversations, fast knowledge retrieval and personalized Q&A experience.',
    startChat: 'Start Chat',
    powerfulQA: 'Powerful Q&A Capability',
    systemPreview: 'System Preview',
    features: {
      flexibleKB: 'üìö Flexible Knowledge Base',
      knowledgeGraph: 'üï∏Ô∏è Knowledge Graph Integration',
      multiModel: 'ü§ñ Multi-Model Support'
    }
  },
  chat: {
    welcome: 'Hello, I am Yuxi, an intelligent assistant based on knowledge graph',
    newConversation: 'New Conversation',
    examples: {
      example1: 'Write a simple bubble sort algorithm',
      example2: 'How is the weather in Wuxi today?',
      example3: 'Tell me about Dream of the Red Chamber',
      example4: 'What day is today?'
    },
    inputPlaceholder: 'Type your message...',
    send: 'Send',
    webSearch: 'Web Search',
    knowledgeGraph: 'Knowledge Graph',
    knowledgeBase: 'Knowledge Base',
    notUseKB: 'Don\'t use knowledge base',
    notUse: 'Don\'t use',
    summarizeTitle: 'Summarize conversation title',
    maxHistoryRounds: 'Max history rounds',
    fontSize: 'Font Size',
    selectFontSize: 'Select font size',
    wideScreen: 'Wide Screen Mode',
    fontSizes: {
      smaller: 'Smaller',
      default: 'Default',
      larger: 'Larger'
    },
    reliabilityNote: 'Please verify the reliability of the content. By',
    expandSidebar: 'Expand sidebar',
    vectorModelMismatch: 'The vector model of the selected knowledge base ({selected}) does not match the current vector model ({current}), please reselect',
    pleaseWaitForPreviousMessage: 'Please wait for the previous message to complete',
    pleaseEnterMessage: 'Please enter a message',
    loginExpired: 'Login expired, please login again',
    summarizeTitlePrompt: 'Please use a very short sentence to name the topic of the following conversation content, without punctuation:',
    question: 'Question',
    reply: 'Reply',
    topic: 'Topic is (one sentence)',
    searching: 'Searching...',
    generating: 'Generating...',
    generatingReply: 'Generating reply...',
    stoppedByUser: 'You stopped generating this response',
    retryStoppedMessage: 'Edit question again',
    rename: 'Rename',
    delete: 'Delete',
    noConversationHistory: 'No conversation history',
    renameConversation: 'Rename Conversation',
    confirm: 'Confirm',
    cancel: 'Cancel',
    titleCannotBeEmpty: 'Title cannot be empty'
  },
  agents: {
    title: 'AI Agents',
    agent: 'Agent',
    description: 'Description',
    createAgent: 'Create Agent',
    editAgent: 'Edit Agent',
    deleteAgent: 'Delete Agent',
    agentName: 'Agent Name',
    agentDescription: 'Agent Description',
    systemPrompt: 'System Prompt',
    temperature: 'Temperature',
    maxTokens: 'Max Tokens',
    model: 'Model',
    agentCreated: 'Agent created successfully',
    agentUpdated: 'Agent updated successfully',
    agentDeleted: 'Agent deleted successfully',
    confirmDelete: 'Are you sure you want to delete this agent?',
    openIndependentPage: 'Open Independent Page',
    setAsDefault: 'Set as Default',
    currentIsDefault: 'Current is default agent',
    setAsDefaultSuccess: 'Set current agent as default successfully',
    setAsDefaultError: 'Error setting default agent',
    noAgentSelected: 'No agent selected',
    configSaved: 'Configuration saved to server',
    configSaveFailed: 'Failed to save configuration to server',
    configReset: 'Configuration reset',
    configResetFailed: 'Failed to reset configuration',
    saveAndPublish: 'Save and Publish Configuration',
    reset: 'Reset',
    requiredEnvVars: 'Required Environment Variables:',
    noConfiguration: 'This agent has no configuration items',
    noCheckpointer: 'This agent has no Checkpointer configured, functionality may not work properly, refer to: https://langchain-ai.github.io/langgraph/concepts/persistence/',
    selectedCount: 'Selected {count} items',
    clearAll: 'Clear All',
    defaultValue: 'Default: {value}',
    newConversation: 'New Conversation',
    loadingHistory: 'Loading history...',
    selectAgentToStart: 'Please select an agent to start conversation',
    differentAgentCapabilities: 'Different agents have different specialties and capabilities',
    enterQuestion: 'Enter question...',
    verifyReliability: 'Please verify the reliability of the content',
    createConversationFailed: 'Failed to create conversation',
    deleteConversationFailed: 'Failed to delete conversation',
    renameConversationFailed: 'Failed to rename conversation',
    retryInDevelopment: 'Retry message feature is in development',
    descriptions: {
      chatbot: 'Basic conversational robot that can answer questions. No tools are used by default, but required tools can be enabled in the configuration.'
    }
  },
  knowledgeBase: {
    title: 'Knowledge Base',
    createDatabase: 'Create Database',
    databaseName: 'Database Name',
    databaseDescription: 'Database Description',
    uploadFiles: 'Upload Files',
    addUrls: 'Add URLs',
    fileUpload: 'File Upload',
    urlInput: 'URL Input',
    indexing: 'Indexing',
    indexed: 'Indexed',
    failed: 'Failed',
    pending: 'Pending',
    files: 'Files',
    chunks: 'Chunks',
    query: 'Query',
    results: 'Results',
    search: 'Search',
    testQuery: 'Test Query',
    ocrSettings: 'OCR Settings',
    enableOcr: 'Enable OCR',
    ocrOptions: {
      disable: 'Disable',
      onnxRapid: 'ONNX with RapidOCR',
      mineruOcr: 'MinerU OCR',
      paddlexOcr: 'Paddlex OCR'
    }
  },
  settings: {
    title: 'Settings',
    basic: 'Basic Settings',
    models: 'Model Settings',
    advanced: 'Advanced Settings',
    userManagement: 'User Management',
    systemConfig: 'System Configuration',
    knowledgeBase: 'Knowledge Base',
    knowledgeGraph: 'Knowledge Graph',
    webSearch: 'Web Search',
    reranker: 'Reranker',
    embedModel: 'Embedding Model',
    chatModel: 'Chat Model',
    temperature: 'Temperature',
    maxTokens: 'Max Tokens',
    restartRequired: 'Restart required',
    restartModel: 'Restart Model',
    saveSettings: 'Save Settings',
    resetSettings: 'Reset Settings',
    pathConfig: 'Path Configuration',
    retrievalConfig: 'Retrieval Configuration',
    featureConfig: 'Feature Configuration',
    modelConfig: 'Model Configuration',
    localModelConfig: 'Local Model Configuration (will be removed in v0.2)',
    apiKeyInstruction: 'Please configure the corresponding APIKEY in the src/.env file and restart the service',
    dockerVolumeWarning: 'If using Docker, make sure to add volumes mapping in docker-compose.dev.yaml',
    modelRestartRequired: 'Model restart required',
    modelRestartDescription: 'Please click the button in the bottom right corner to restart the model',
    restartNow: 'Restart Now',
    restartingModel: 'Restarting model...',
    restartComplete: 'Restart complete!',
    restartFailed: 'Restart failed',
    kgRequiresKB: 'Knowledge graph requires knowledge base to be enabled first',
    kbCloseRequiresKgClose: 'Knowledge base cannot be disabled while knowledge graph is enabled',
    superAdminRequired: 'Super administrator privileges required for this operation',
    adminPermissionNotice: 'Admin Access Level',
    adminPermissionDescription: 'Model configuration and advanced settings require super admin privileges. Contact your super admin to modify these settings.'
  },
  database: {
    title: 'Document Knowledge Base',
    createDatabase: 'Create Database',
    databaseInfo: 'Database Information',
    statistics: 'Statistics',
    operations: 'Operations',
    maintenance: 'Maintenance',
    backup: 'Backup',
    restore: 'Restore',
    databaseName: 'Database Name',
    databaseDescription: 'Database Description',
    databaseNamePlaceholder: 'Enter database name',
    databaseDescriptionPlaceholder: 'Enter database description',
    descriptionHint: 'In agent workflows, this description will serve as the tool description. Agents will select appropriate tools based on the database title and description. The more detailed the description, the easier it is for agents to select the right tool.',
    createDatabaseDescription: 'Import your own text data or write data in real-time through Webhook to enhance LLM context.',
    files: 'files',
    noDescription: 'No description',
    configureKnowledgeBase: 'Go to',
    page: 'page to configure knowledge base.',
    databaseNameRequired: 'Database name cannot be empty',
    createSuccess: 'Created successfully',
    createFailed: 'Creation failed',
    loadFailed: 'Failed to load database list',
    adminPermissionRequired: 'Administrator permission required to access knowledge base',
    editKnowledgeBase: 'Edit Knowledge Base Information',
    deleteDatabase: 'Delete Database',
    vectorModelMismatch: 'Vector model mismatch, please reselect',
    knowledgeBaseName: 'Knowledge Base Name',
    knowledgeBaseDescription: 'Knowledge Base Description',
    enterKnowledgeBaseName: 'Please enter knowledge base name',
    enterKnowledgeBaseDescription: 'Please enter knowledge base description',
    chunkParameterConfig: 'Chunk Parameter Configuration',
    addFiles: 'Add Files',
    chunkConfigDescription: 'Adjusting chunk parameters controls text segmentation, affecting retrieval quality and document loading efficiency.',
    chunkSize: 'Chunk Size',
    chunkOverlap: 'Chunk Overlap',
    autoIndexing: 'Auto Indexing',
    chunkSizeDescription: 'Maximum number of characters per text segment',
    chunkOverlapDescription: 'Number of overlapping characters between adjacent text segments',
    autoIndexingDescription: 'Automatically start indexing after chunking, generate vectors and write to database',
    generateChunks: 'Generate Chunks',
    uploadFiles: 'Upload Files',
    enterWebUrls: 'Enter Web URLs',
    ocrConfig: 'OCR Configuration',
    useOcr: 'Use OCR',
    ocrDescription: 'Enable OCR functionality to support text extraction from PDF files',
    fileUploadArea: 'Click or drag files here to upload',
    fileUploadHint: 'Currently only supports uploading text files such as .pdf, .txt, .md. Files with the same name cannot be added repeatedly',
    webUrlsLabel: 'Web Links (one URL per line)',
    enterWebUrls: 'Please enter web links, one per line',
    urlHint: 'Supports adding web content, the system will automatically crawl web text and chunk it. Please ensure URL format is correct and publicly accessible.',
    fileList: 'File List',
    retrievalTest: 'Retrieval Test',
    refreshing: 'Refreshing',
    refresh: 'Refresh',
    selectedItems: 'Selected {count} items',
    batchIndex: 'Batch Index',
    batchDelete: 'Batch Delete',
    loading: 'Loading...',
    fileDetails: 'File Details',
    segments: '{count} segments in total',
    queryParameters: 'Query Parameters',
    retrievalCount: 'Retrieval Count',
    filterLowQuality: 'Filter Low Quality',
    topK: 'Top K',
    sortingMethod: 'Sorting Method',
    rerankerScore: 'Reranker Score',
    similarity: 'Similarity',
    rerankerThreshold: 'Reranker Threshold',
    distanceThreshold: 'Distance Threshold',
    queryRewrite: 'Query Rewrite',
    rewriteNote: '(Re-search required after modification)',
    off: 'Off',
    on: 'On',
    enableRewrite: 'Enable Rewrite',
    pseudoDocGeneration: 'Pseudo Document Generation',
    enterQuerySentence: 'Enter the sentence to query',
    retrieve: 'Retrieve',
    total: 'Total',
    afterFiltering: 'After Filtering',
    rewrittenQuery: 'Rewritten Query',
    indexing: 'Index',
    deleteFile: 'Delete',
    deleteSuccess: 'Deleted successfully',
    deleteFailed: 'Deletion failed',
    confirmDeleteFile: 'Are you sure you want to delete this file?',
    confirm: 'Confirm',
    cancel: 'Cancel',
    noFilesToDelete: 'No files to delete',
    confirmBatchDelete: 'Are you sure you want to delete the selected {count} files?',
    deleteSuccessCount: 'Successfully deleted {count} files',
    deleteFailedCount: '{count} files failed to delete',
    batchDeleteError: 'An error occurred during batch deletion',
    uploadFilesFirst: 'Please upload files first',
    fileProcessingResult: 'File processing result',
    fileSubmittedForProcessing: 'File has been submitted for processing, please refresh the list later to check status',
    fileProcessingFailed: 'File processing failed',
    fileProcessingRequestFailed: 'File processing request failed',
    validUrlRequired: 'Please enter valid web links (must start with http:// or https://)',
    urlSubmittedForProcessing: 'URL has been submitted for processing, please refresh the list later to check status',
    urlProcessingFailed: 'URL processing failed',
    urlProcessingRequestFailed: 'URL processing request failed',
    filename: 'Filename',
    uploadTime: 'Upload Time',
    status: 'Status',
    type: 'Type',
    action: 'Action',
    knowledgeBaseUpdateSuccess: 'Knowledge base information updated successfully',
    updateFailed: 'Update failed',
    chunkConfigUpdated: 'Chunk parameter configuration updated',
    invalidFileId: 'Invalid file ID',
    fileIndexStarted: 'File {fileId} indexing started.',
    fileIndexFailed: 'File {fileId} indexing failed to start.',
    fileIndexError: 'Error occurred while indexing file {fileId}.',
    noFilesToIndex: 'No files need indexing',
    queryExamples: {
      example1: 'What maids does Jia Baoyu have?',
      example2: 'Please introduce the main characters of Dream of the Red Chamber',
      example3: 'What is Lin Daiyu\'s personality like?',
      example4: 'Cao Xueqin\'s creative background'
    }
  },
  knowledgeBaseResult: {
    found: 'Found {segmentCount} relevant document segments from {fileCount} files'
  },
  errors: {
    networkError: 'Network error, please try again',
    serverError: 'Server error, please check logs',
    unauthorized: 'Unauthorized, please login again',
    forbidden: 'Access denied',
    notFound: 'Resource not found',
    validationError: 'Validation error',
    unknownError: 'Unknown error occurred'
  },
  messages: {
    saveSuccess: 'Saved successfully',
    deleteSuccess: 'Deleted successfully',
    updateSuccess: 'Updated successfully',
    operationSuccess: 'Operation completed successfully',
    operationFailed: 'Operation failed',
    confirmDelete: 'Are you sure you want to delete?',
    unsavedChanges: 'You have unsaved changes',
    loginSuccess: 'Login successful',
    adminAccountCreated: 'Administrator account created successfully',
    initializationFailed: 'Initialization failed, please try again',
    systemError: 'System error, please try again later',
    passwordMismatch: 'Passwords do not match',
    serverError: 'Server status abnormal',
    connectionError: 'Unable to connect to server, please check network connection',
    copySuccess: 'Text copied to clipboard',
    copyFailed: 'Copy failed, please copy manually',
    copyNotSupported: 'Browser does not support automatic copying, please copy manually',
    fileDetailsFailed: 'Failed to get file details!',
    messageUpdateFailed: 'Message update failed',
    unauthorized: 'Unauthorized, please login first',
    requestFailed: 'Request failed',
    contentLoadFailed: 'Content loading failed',
    unknownError: 'Unknown error'
  },
  language: {
    switchTo: 'Switch to ',
    chinese: 'Chinese',
    english: 'English',
    japanese: 'Japanese'
  },
  graph: {
    title: 'Graph Database',
    enableKnowledgeGraph: 'Go to Settings page to enable knowledge graph.',
    uploadFile: 'Upload File',
    addIndex: 'Add Index for {count} Nodes',
    searchEntity: 'Search Entity',
    searchEntityPlaceholder: 'Enter entity to search',
    getNodes: 'Get Nodes',
    addToGraph: 'Add to Graph Database',
    modelMismatch: 'Model mismatch, building index may result in unsearchable situations!',
    currentGraphModel: 'Current graph database vector model: {model}',
    currentSelectedModel: 'Currently selected vector model: {model}',
    firstTimeNotice: 'The vector model cannot be modified after first creation, current vector model: {model}',
    uploadNotice: 'Click or drag files here to upload',
    uploadHint: 'Currently only supports uploading jsonl files. Files with the same name cannot be added repeatedly.',
    loadGraphInfoFailed: 'Failed to load graph database information',
    addFileFailed: 'Failed to add file',
    loadNodesFailed: 'Failed to load nodes',
    pleaseConfigureGraph: 'Please go to settings page to configure and enable knowledge graph',
    pleaseRetryLater: 'Please try again later',
    pleaseEnterEntity: 'Please enter entity to search',
    noRelatedEntity: 'No related entity found',
    queryError: 'Query error: {error}',
    vectorModelMismatch: 'Vector model mismatch, cannot add index. Current vector model: {current}, graph database vector model: {graph}',
    backendProcessing: 'Backend is processing, please try again later',
    indexAddSuccess: 'Index added successfully',
    indexAddFailed: 'Failed to add index',
    loadingStatus: 'Loading',
    connectedStatus: 'Connected',
    closedStatus: 'Closed',
    graphInfo: '{dbName} - {entityCount} entities, {relationCount} relationships. Vector model: {modelName}{unindexed}',
    unindexedSuffix: ', {count} nodes unindexed',
    confirmModelMismatch: 'The vector model used when building the graph database is {graphModel}, and the current vector model is {currentModel}. Do you want to continue the query?'
  },
  components: {
    reasoning: 'Reasoning',
    thinking: 'Thinking...',
    reasoningProcess: 'Reasoning Process',
    callingTool: 'Calling tool: ',
    tool: 'Tool',
    executionCompleted: 'execution completed',
    parameters: 'Parameters:',
    exampleQueries: 'Example Queries:',
    knowledgeBaseSearchResults: 'Knowledge Base Search Results',
    similarity: 'Similarity',
    rerank: 'Rerank',
    noRelevantContent: 'No relevant knowledge base content found',
    documentSegment: 'Document Segment',
    filename: 'Filename',
    similarityScore: 'Similarity Score',
    rerankScore: 'Rerank Score',
    documentContent: 'Document Content',
    customModels: 'Custom Models',
    addModel: 'Add Model',
    addOpenAICompatibleModel: 'Add OpenAI-compatible model',
    statusLabels: {
      init: 'Initializing',
      loading: 'Loading',
      reasoning: 'Reasoning',
      generating: 'Generating',
      error: 'Error'
    },
    tableConfig: {
      modelName: 'Model Name',
      modelPath: 'Model Path',
      addPathMapping: 'Add Path Mapping',
      modelNamePlaceholder: 'Model name',
      modelPathPlaceholder: 'Model local path',
      modelNameRequired: 'Model name (consistent with Huggingface name, e.g., BAAI/bge-large-zh-v1.5)',
      modelPathRequired: 'Model local path (absolute path, e.g., /hdd/models/BAAI/bge-large-zh-v1.5)',
      enterModelName: 'Please enter model name',
      enterModelPath: 'Please enter model local path',
      keyValueRequired: 'Key or value cannot be empty',
      keyExists: 'Key already exists'
    },
    userInfo: {
      superAdmin: 'Super Administrator',
      admin: 'Administrator',
      user: 'Regular User',
      unknownRole: 'Unknown Role'
    },
    modelProviders: {
      confirmDeleteModel: 'Confirm deleting this model?',
      confirmDelete: 'Confirm Delete',
      cancel: 'Cancel',
      modelIcon: 'Model Icon',
      configureProvider: 'Configure Model Provider',
      confirm: 'Confirm',
      modelName: 'Model Name',
      enterModelName: 'Please enter model name',
      apiBase: 'API Base',
      enterApiBase: 'Please enter API Base',
      apiKey: 'API Key',
      configureModel: 'Configure {providerName} Model',
      saveConfig: 'Save Configuration',
      searchModels: 'Search models...',
      configureApiKey: 'Please configure the corresponding APIKEY in src/.env and restart the service',
      providerNotSupported: 'This provider has not yet adapted the method for getting model lists. If you need to add models, please add them in src/static/models.private.yml.',
      addCustomModel: 'Add Custom Model',
      editCustomModel: 'Edit Custom Model',
      modelAddSuccess: 'Model added successfully',
      modelEditSuccess: 'Model modified successfully',
      completeModelInfo: 'Please fill in complete model name and API Base information.',
      modelIdExists: 'Model ID already exists',
      getModelListFailed: 'Failed to get {provider} model list',
      configureApiKeyFirst: 'Please configure the corresponding APIKEY in src/.env and restart the service',
      savingConfig: 'Saving configuration...',
      modelConfigSaved: 'Model configuration saved!',
      saveConfigFailed: 'Failed to save configuration',
      loadingModels: 'Loading model list...',
      selectModels: 'Select {providerName} models',
      modelSelectionDescription: 'Check the models you want to enable in the system. Note that the list may contain non-conversational models, please review carefully.',
      selectedModelsCount: 'Selected {count} models',
      filteredModelsCount: '(Currently showing {count} filtered)',
      openAICompatibleDescription: 'The added models are OpenAI-compatible models, such as vllm, Ollama.',
      modelNameDescription: 'The name of the model to call',
      apiBaseDescription: 'For example http://localhost:11434/v1',
      requiresConfiguration: 'Requires configuration'
    }
  }
}; 